I"T*<h1 id="pythagoreic-pancakes-413-pts"><span style="color:red">Pythagoreic Pancakes (413 pts)</span></h1>

<hr />

<h2 id="part-1--challenge-description">PART 1 : CHALLENGE DESCRIPTION</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>We got a weird transmission through space time from some guy that claims he's related to Santa Claus. He says that he has a really difficult problem that he needs to solve and he needs your help. Maybe it's worth investigating.

Remote server: nc challs.xmas.htsp.ro 14004
Author: Gabies
</code></pre></div></div>

<hr />

<h2 id="part-2--sha-256-partial-matching">PART 2 : SHA-256 PARTIAL MATCHING</h2>

<p>Connecting to the given server using <strong><code class="highlighter-rouge">netcat</code></strong> gives:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc challs.xmas.htsp.ro 14004

  Provide a hex string X such that sha256(X)[-6:] = 3b7f23

</code></pre></div></div>

<p>The server asks for a hex-encoded string where the last 6 characters when hashed using SHA-256 matches the given (e.g. <strong><code class="highlighter-rouge">3b7f23</code></strong>) which changes everytime a new connection is formed.</p>

<p>I solved it using the following block of code:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="n">pwnable</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"challs.xmas.htsp.ro"</span><span class="p">,</span> <span class="mi">14004</span><span class="p">)</span>

<span class="n">request</span> <span class="o">=</span> <span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
<span class="n">criterion</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="o">-</span><span class="mi">7</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"FINDING PARTIAL HASH COLLISION WITH </span><span class="se">\"</span><span class="si">%</span><span class="s">s</span><span class="se">\"</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">criterion</span><span class="p">))</span>

<span class="n">characters</span> <span class="o">=</span> <span class="s">'0123456789abcdef'</span>
<span class="n">length</span> <span class="o">=</span> <span class="mi">16</span>

<span class="n">string</span> <span class="o">=</span> <span class="n">characters</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">length</span>
<span class="n">char_indices</span> <span class="o">=</span>  <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">]</span>

<span class="k">while</span> <span class="n">char_indices</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">characters</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">char_indices</span><span class="p">):</span>

    <span class="n">hexString</span> <span class="o">=</span> <span class="s">""</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">characters</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">char_indices</span><span class="p">])</span>

    <span class="n">sha256</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">()</span>
    <span class="n">sha256</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">hexString</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"hex"</span><span class="p">)))</span>
    <span class="n">sha256_hex</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">sha256</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">())</span>

    <span class="k">if</span> <span class="n">sha256_hex</span><span class="p">[</span><span class="o">-</span><span class="mi">6</span><span class="p">:]</span> <span class="o">==</span> <span class="n">criterion</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="s">"PARTIAL MATCH FOUND: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">hexString</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"hex"</span><span class="p">)))</span>
        <span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="s">"SHA256 HASH: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">sha256_hex</span><span class="p">))</span>
        <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"SENDING HEX STRING: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">hexString</span><span class="p">))</span>
        <span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">hexString</span><span class="p">)</span>
        <span class="k">break</span>

    <span class="n">char_indices</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>

        <span class="k">if</span> <span class="n">char_indices</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">characters</span><span class="p">):</span> 
            <span class="n">char_indices</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">char_indices</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

</code></pre></div></div>

<p>This works by generating an initial string of <strong><code class="highlighter-rouge">0</code></strong>s with length 16 and from what I’ve noticed, the required match could be generated <strong style="color:orange">within a tolerance of 5 hex characters</strong></p>

<p>The hex string is decoded into ASCII then hashed using SHA-256 then if last 6 characters of the hash matches the given, the hex string is submitted to the server.</p>

<p>After a successful submission, the server responds with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Good, you can continue!

Hey there, Santa's distant relative here, Pythagora has a question for you!
Sit and listen, it might be an old story.
Note: the pythagorean triples are sorted increasingly by c (the hypotenuse), then by b (the long leg) then by a (the short leg).
Also you have 5 seconds / test.
</code></pre></div></div>

<p>The server gives you a challenge of finding <strong style="color:orange">primitive pythagorean triples</strong> sorted by the length of each side starting from the right with the longest side (hypotenuse)</p>

<hr />

<h2 id="part-3--getting-the-flag">PART 3 : GETTING THE FLAG</h2>

<p>I found a variant of <a href="https://en.wikipedia.org/wiki/Pythagorean_triple#A_variant">Euclid’s Formula for generating pythagorean triples</a> wherein if <strong><code class="highlighter-rouge">m</code></strong> and <strong><code class="highlighter-rouge">n</code></strong> are <strong style="color:orange">odd numbers</strong> and are <strong style="color:orange">coprime</strong> (their greatest common divisor is 1) and <strong><code class="highlighter-rouge">m &gt; n</code></strong>, then following the formula below results in a primitive pythagorean triple:</p>

<p><span style="class:center"><img src="./screenshots/euclids_formula.png" alt="Euclid's Formula" /></span></p>

<p>Now the next step is to find an algorithm that returns the greatest common divisor (GCD) of two numbers where I found <a href="https://www.di-mgt.com.au/euclidean.html">this</a>:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">getGCD</span><span class="p">(</span><span class="n">sml_num</span><span class="p">,</span> <span class="n">lrg_num</span><span class="p">):</span> <span class="c1"># Euclidian Algorithm
</span>
    <span class="k">while</span> <span class="n">sml_num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        
        <span class="n">r</span> <span class="o">=</span> <span class="n">lrg_num</span> <span class="o">%</span> <span class="n">sml_num</span>
        <span class="n">lrg_num</span> <span class="o">=</span> <span class="n">sml_num</span>
        <span class="n">sml_num</span> <span class="o">=</span> <span class="n">r</span>

    <span class="k">return</span> <span class="n">lrg_num</span>

</code></pre></div></div>

:ET