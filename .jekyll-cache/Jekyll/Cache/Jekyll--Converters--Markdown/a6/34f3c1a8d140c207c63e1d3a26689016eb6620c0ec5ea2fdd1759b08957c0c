I"®ª<h1 id="pythagoreic-pancakes-413-pts"><span style="color:red">Pythagoreic Pancakes (413 pts)</span></h1>

<hr />

<h2 id="part-1--challenge-description">PART 1 : CHALLENGE DESCRIPTION</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>We got a weird transmission through space time from some guy that claims he's related to Santa Claus. He says that he has a really difficult problem that he needs to solve and he needs your help. Maybe it's worth investigating.

Remote server: nc challs.xmas.htsp.ro 14004
Author: Gabies
</code></pre></div></div>

<hr />

<h2 id="part-2--sha-256-partial-matching">PART 2 : SHA-256 PARTIAL MATCHING</h2>

<p>Connecting to the given server using <strong><code class="highlighter-rouge">netcat</code></strong> gives:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nc challs.xmas.htsp.ro 14004

  Provide a hex string X such that sha256(X)[-6:] = 3b7f23

</code></pre></div></div>

<p>The server asks for a hex-encoded string where the last 6 characters when hashed using SHA-256 matches the given (e.g. <strong><code class="highlighter-rouge">3b7f23</code></strong>) which changes everytime a new connection is formed.</p>

<p>I solved it using the following block of code:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="n">pwnable</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"challs.xmas.htsp.ro"</span><span class="p">,</span> <span class="mi">14004</span><span class="p">)</span>

<span class="n">request</span> <span class="o">=</span> <span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
<span class="n">criterion</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="o">-</span><span class="mi">7</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"FINDING PARTIAL HASH COLLISION WITH </span><span class="se">\"</span><span class="si">%</span><span class="s">s</span><span class="se">\"</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">criterion</span><span class="p">))</span>

<span class="n">characters</span> <span class="o">=</span> <span class="s">'0123456789abcdef'</span>
<span class="n">length</span> <span class="o">=</span> <span class="mi">16</span>

<span class="n">string</span> <span class="o">=</span> <span class="n">characters</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">length</span>
<span class="n">char_indices</span> <span class="o">=</span>  <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">]</span>

<span class="k">while</span> <span class="n">char_indices</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">characters</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">char_indices</span><span class="p">):</span>

    <span class="n">hexString</span> <span class="o">=</span> <span class="s">""</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">characters</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">char_indices</span><span class="p">])</span>

    <span class="n">sha256</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">()</span>
    <span class="n">sha256</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">hexString</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"hex"</span><span class="p">)))</span>
    <span class="n">sha256_hex</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">sha256</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">())</span>

    <span class="k">if</span> <span class="n">sha256_hex</span><span class="p">[</span><span class="o">-</span><span class="mi">6</span><span class="p">:]</span> <span class="o">==</span> <span class="n">criterion</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="s">"PARTIAL MATCH FOUND: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">hexString</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"hex"</span><span class="p">)))</span>
        <span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="s">"SHA256 HASH: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">sha256_hex</span><span class="p">))</span>
        <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"SENDING HEX STRING: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">hexString</span><span class="p">))</span>
        <span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">hexString</span><span class="p">)</span>
        <span class="k">break</span>

    <span class="n">char_indices</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>

        <span class="k">if</span> <span class="n">char_indices</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">characters</span><span class="p">):</span> 
            <span class="n">char_indices</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">char_indices</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

</code></pre></div></div>

<p>This works by generating an initial string of <strong><code class="highlighter-rouge">0</code></strong>s with length 16 and from what Iâ€™ve noticed, the required match could be generated <strong style="color:orange">within a tolerance of 5 hex characters</strong></p>

<p>The hex string is decoded into ASCII then hashed using SHA-256 then if last 6 characters of the hash matches the given, the hex string is submitted to the server.</p>

<p>After a successful submission, the server responds with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Good, you can continue!

Hey there, Santa's distant relative here, Pythagora has a question for you!
Sit and listen, it might be an old story.
Note: the pythagorean triples are sorted increasingly by c (the hypotenuse), then by b (the long leg) then by a (the short leg).
Also you have 5 seconds / test.
</code></pre></div></div>

<p>The server gives you a challenge of finding <strong style="color:orange">primitive pythagorean triples</strong> sorted by the length of each side starting from the right with the longest side (hypotenuse)</p>

<hr />

<h2 id="part-3--getting-the-flag">PART 3 : GETTING THE FLAG</h2>

<p>I found a variant of <a href="https://en.wikipedia.org/wiki/Pythagorean_triple#A_variant">Euclidâ€™s Formula for generating pythagorean triples</a> wherein if <strong><code class="highlighter-rouge">m</code></strong> and <strong><code class="highlighter-rouge">n</code></strong> are <strong style="color:orange">odd numbers</strong> and are <strong style="color:orange">coprime</strong> (their greatest common divisor is 1) and <strong><code class="highlighter-rouge">m &gt; n</code></strong>, then following the formula below results in a primitive pythagorean triple:</p>

<p><img alt="Euclid's Formula" src="./screenshots/euclids_formula.png" style="display:block;margin-left:auto;margin-right:auto" /></p>

<p>Now, the next step is to find an algorithm that returns the greatest common divisor (GCD) of two numbers.</p>

<p>I found <a href="https://www.di-mgt.com.au/euclidean.html">this</a>:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">getGCD</span><span class="p">(</span><span class="n">sml_num</span><span class="p">,</span> <span class="n">lrg_num</span><span class="p">):</span> <span class="c1"># Euclidian Algorithm
</span>
    <span class="k">while</span> <span class="n">sml_num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        
        <span class="n">r</span> <span class="o">=</span> <span class="n">lrg_num</span> <span class="o">%</span> <span class="n">sml_num</span>
        <span class="n">lrg_num</span> <span class="o">=</span> <span class="n">sml_num</span>
        <span class="n">sml_num</span> <span class="o">=</span> <span class="n">r</span>

    <span class="k">return</span> <span class="n">lrg_num</span>

</code></pre></div></div>

<p>Now that I have everything I need to generate primitive pythagorean triples, all that is left it to solve the challenges:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="n">pwnable</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"challs.xmas.htsp.ro"</span><span class="p">,</span> <span class="mi">14004</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"===================================================================="</span><span class="p">)</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"GENERATING PRIMITIVE PYTHAGOREAN TRIPLES"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">getGCD</span><span class="p">(</span><span class="n">sml_num</span><span class="p">,</span> <span class="n">lrg_num</span><span class="p">):</span> <span class="c1"># Euclidian Algorithm
</span>
    <span class="k">while</span> <span class="n">sml_num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        
        <span class="n">r</span> <span class="o">=</span> <span class="n">lrg_num</span> <span class="o">%</span> <span class="n">sml_num</span>
        <span class="n">lrg_num</span> <span class="o">=</span> <span class="n">sml_num</span>
        <span class="n">sml_num</span> <span class="o">=</span> <span class="n">r</span>

    <span class="k">return</span> <span class="n">lrg_num</span>

<span class="n">triples</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5001</span><span class="p">):</span>

    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>

        <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">y</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">getGCD</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="c1"># Euclid's formula for determining Pythagorean Triples
</span>                <span class="n">a</span> <span class="o">=</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span>
                <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">-</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
                <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>

                <span class="n">triple</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">([</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">,</span><span class="n">c</span><span class="p">])</span>

                <span class="n">triples</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">triple</span><span class="p">])</span>

<span class="c1">#triples = sorted(triples, key=lambda x: (x[3], x[2][2], x[2][1]))
</span><span class="n">triples</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">triples</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]))</span>
<span class="c1">#triples = sorted(triples, key=lambda x: x[3])
</span>
<span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">d PRIMITIVE PYTHAGOREAN TRIPLES GENERATED"</span> <span class="o">%</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">triples</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"===================================================================="</span><span class="p">)</span>

<span class="n">request</span> <span class="o">=</span> <span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
<span class="n">criterion</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="o">-</span><span class="mi">7</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"FINDING PARTIAL HASH COLLISION WITH </span><span class="se">\"</span><span class="si">%</span><span class="s">s</span><span class="se">\"</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">criterion</span><span class="p">))</span>

<span class="n">characters</span> <span class="o">=</span> <span class="s">'0123456789abcdef'</span>
<span class="n">length</span> <span class="o">=</span> <span class="mi">16</span>

<span class="n">string</span> <span class="o">=</span> <span class="n">characters</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">length</span>
<span class="n">char_indices</span> <span class="o">=</span>  <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">]</span>

<span class="k">while</span> <span class="n">char_indices</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">characters</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">char_indices</span><span class="p">):</span>

    <span class="n">hexString</span> <span class="o">=</span> <span class="s">""</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">characters</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">char_indices</span><span class="p">])</span>

    <span class="n">sha256</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">()</span>
    <span class="n">sha256</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">hexString</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"hex"</span><span class="p">)))</span>
    <span class="n">sha256_hex</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">sha256</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">())</span>

    <span class="k">if</span> <span class="n">sha256_hex</span><span class="p">[</span><span class="o">-</span><span class="mi">6</span><span class="p">:]</span> <span class="o">==</span> <span class="n">criterion</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="s">"PARTIAL MATCH FOUND: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">hexString</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"hex"</span><span class="p">)))</span>
        <span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="s">"SHA256 HASH: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">sha256_hex</span><span class="p">))</span>
        <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"SENDING HEX STRING: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">hexString</span><span class="p">))</span>
        <span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">hexString</span><span class="p">)</span>
        <span class="k">break</span>

    <span class="n">char_indices</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>

        <span class="k">if</span> <span class="n">char_indices</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">characters</span><span class="p">):</span> 
            <span class="n">char_indices</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">char_indices</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span> 

<span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">())</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span> <span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"==================================================================="</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">())</span>
    <span class="n">challenge</span> <span class="o">=</span> <span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>
    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">challenge</span><span class="p">)</span>

    <span class="n">nth_prim_triple</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">challenge</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">"-"</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">triple</span> <span class="o">=</span> <span class="n">triples</span><span class="p">[</span><span class="n">nth_prim_triple</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span>

    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">d-TH PRIMITIVE PYTHAGOREAN TRIPLE: </span><span class="si">%</span><span class="s">d, </span><span class="si">%</span><span class="s">d, </span><span class="si">%</span><span class="s">d"</span> <span class="o">%</span> <span class="p">(</span><span class="n">nth_prim_triple</span><span class="p">,</span> <span class="n">triple</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">triple</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">triple</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>

    <span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">d,</span><span class="si">%</span><span class="s">d,</span><span class="si">%</span><span class="s">d"</span> <span class="o">%</span> <span class="p">(</span><span class="n">triple</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">triple</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">triple</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
    <span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"==================================================================="</span><span class="p">)</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">())</span>
<span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="s">"==================================================================="</span><span class="p">)</span>
</code></pre></div></div>

<p>The code above precomputes all possible primitive pythagorean triples from coprimes found from the first 5000 positive integers then sorts them by length of the hypotenuse then length of the longest leg. All precomputed values are saved in memory and are retrieved by index when the challenge comes.</p>

<p>Running the code:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Opening</span> <span class="n">connection</span> <span class="n">to</span> <span class="n">challs</span><span class="o">.</span><span class="n">xmas</span><span class="o">.</span><span class="n">htsp</span><span class="o">.</span><span class="n">ro</span> <span class="n">on</span> <span class="n">port</span> <span class="mi">14004</span><span class="p">:</span> <span class="n">Done</span>
<span class="o">====================================================================</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">GENERATING</span> <span class="n">PRIMITIVE</span> <span class="n">PYTHAGOREAN</span> <span class="n">TRIPLES</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="mi">2533381</span> <span class="n">PRIMITIVE</span> <span class="n">PYTHAGOREAN</span> <span class="n">TRIPLES</span> <span class="n">GENERATED</span>
<span class="o">====================================================================</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Provide</span> <span class="n">a</span> <span class="nb">hex</span> <span class="n">string</span> <span class="n">X</span> <span class="n">such</span> <span class="n">that</span> <span class="n">sha256</span><span class="p">(</span><span class="n">X</span><span class="p">)[</span><span class="o">-</span><span class="mi">6</span><span class="p">:]</span> <span class="o">=</span> <span class="mi">536</span><span class="n">a79</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">FINDING</span> <span class="n">PARTIAL</span> <span class="n">HASH</span> <span class="n">COLLISION</span> <span class="n">WITH</span> <span class="s">"536a79"</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">PARTIAL</span> <span class="n">MATCH</span> <span class="n">FOUND</span><span class="p">:</span> \<span class="n">x00</span>\<span class="n">x00</span>\<span class="n">x00</span>\<span class="n">x00</span>\<span class="n">x005</span>\<span class="n">x80</span>\<span class="n">x96</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">SHA256</span> <span class="n">HASH</span><span class="p">:</span> <span class="mi">3</span><span class="n">aa22a42ecb2d489b7473fdaba23200a5d8eaf36012d35213972e6eecc536a79</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">SENDING</span> <span class="n">HEX</span> <span class="n">STRING</span><span class="p">:</span> <span class="mi">0000000000358096</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Good</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="k">continue</span><span class="err">!</span>
<span class="o">===================================================================</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Here</span><span class="s">'s the challange #1:</span><span class="err">
</span><span class="s">[*] Give me the 8455-th primitive pythagorean triple in the following format: a,b,c with a &lt; b &lt; c.</span><span class="err">
</span><span class="s">[*] 8455-TH PRIMITIVE PYTHAGOREAN TRIPLE: 5980, 52731, 53069</span><span class="err">
</span><span class="s">[+] Well done, here, have another.</span><span class="err">
</span><span class="s">===================================================================</span><span class="err">
</span><span class="s">[*] Here'</span><span class="n">s</span> <span class="n">the</span> <span class="n">challange</span> <span class="c1">#2:
</span><span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Give</span> <span class="n">me</span> <span class="n">the</span> <span class="mi">1477</span><span class="o">-</span><span class="n">th</span> <span class="n">primitive</span> <span class="n">pythagorean</span> <span class="n">triple</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">following</span> <span class="nb">format</span><span class="p">:</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span> <span class="k">with</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">.</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="mi">1477</span><span class="o">-</span><span class="n">TH</span> <span class="n">PRIMITIVE</span> <span class="n">PYTHAGOREAN</span> <span class="n">TRIPLE</span><span class="p">:</span> <span class="mi">3040</span><span class="p">,</span> <span class="mi">8769</span><span class="p">,</span> <span class="mi">9281</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Well</span> <span class="n">done</span><span class="p">,</span> <span class="n">here</span><span class="p">,</span> <span class="n">have</span> <span class="n">another</span><span class="o">.</span>
<span class="o">===================================================================</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Here</span><span class="s">'s the challange #3:</span><span class="err">
</span><span class="s">[*] Give me the 10155-th primitive pythagorean triple in the following format: a,b,c with a &lt; b &lt; c.</span><span class="err">
</span><span class="s">[*] 10155-TH PRIMITIVE PYTHAGOREAN TRIPLE: 14555, 62172, 63853</span><span class="err">
</span><span class="s">[+] Well done, here, have another.</span><span class="err">
</span><span class="s">===================================================================</span><span class="err">
</span><span class="s">[*] Here'</span><span class="n">s</span> <span class="n">the</span> <span class="n">challange</span> <span class="c1">#4:
</span><span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Give</span> <span class="n">me</span> <span class="n">the</span> <span class="mi">5379</span><span class="o">-</span><span class="n">th</span> <span class="n">primitive</span> <span class="n">pythagorean</span> <span class="n">triple</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">following</span> <span class="nb">format</span><span class="p">:</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span> <span class="k">with</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">.</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="mi">5379</span><span class="o">-</span><span class="n">TH</span> <span class="n">PRIMITIVE</span> <span class="n">PYTHAGOREAN</span> <span class="n">TRIPLE</span><span class="p">:</span> <span class="mi">10023</span><span class="p">,</span> <span class="mi">32264</span><span class="p">,</span> <span class="mi">33785</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Well</span> <span class="n">done</span><span class="p">,</span> <span class="n">here</span><span class="p">,</span> <span class="n">have</span> <span class="n">another</span><span class="o">.</span>
<span class="o">===================================================================</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Here</span><span class="s">'s the challange #5:</span><span class="err">
</span><span class="s">[*] Give me the 7662-th primitive pythagorean triple in the following format: a,b,c with a &lt; b &lt; c.</span><span class="err">
</span><span class="s">[*] 7662-TH PRIMITIVE PYTHAGOREAN TRIPLE: 25320, 40921, 48121</span><span class="err">
</span><span class="s">[+] Well done, here, have another.</span><span class="err">
</span><span class="s">===================================================================</span><span class="err">
</span><span class="s">[*] Here'</span><span class="n">s</span> <span class="n">the</span> <span class="n">challange</span> <span class="c1">#6:
</span><span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Give</span> <span class="n">me</span> <span class="n">the</span> <span class="mi">15703</span><span class="o">-</span><span class="n">th</span> <span class="n">primitive</span> <span class="n">pythagorean</span> <span class="n">triple</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">following</span> <span class="nb">format</span><span class="p">:</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span> <span class="k">with</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">.</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="mi">15703</span><span class="o">-</span><span class="n">TH</span> <span class="n">PRIMITIVE</span> <span class="n">PYTHAGOREAN</span> <span class="n">TRIPLE</span><span class="p">:</span> <span class="mi">48032</span><span class="p">,</span> <span class="mi">86175</span><span class="p">,</span> <span class="mi">98657</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Well</span> <span class="n">done</span><span class="p">,</span> <span class="n">here</span><span class="p">,</span> <span class="n">have</span> <span class="n">another</span><span class="o">.</span>
<span class="o">===================================================================</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Here</span><span class="s">'s the challange #7:</span><span class="err">
</span><span class="s">[*] Give me the 45559-th primitive pythagorean triple in the following format: a,b,c with a &lt; b &lt; c.</span><span class="err">
</span><span class="s">[*] 45559-TH PRIMITIVE PYTHAGOREAN TRIPLE: 184149, 219220, 286301</span><span class="err">
</span><span class="s">[+] Well done, here, have another.</span><span class="err">
</span><span class="s">===================================================================</span><span class="err">
</span><span class="s">[*] Here'</span><span class="n">s</span> <span class="n">the</span> <span class="n">challange</span> <span class="c1">#8:
</span><span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Give</span> <span class="n">me</span> <span class="n">the</span> <span class="mi">137044</span><span class="o">-</span><span class="n">th</span> <span class="n">primitive</span> <span class="n">pythagorean</span> <span class="n">triple</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">following</span> <span class="nb">format</span><span class="p">:</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span> <span class="k">with</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">.</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="mi">137044</span><span class="o">-</span><span class="n">TH</span> <span class="n">PRIMITIVE</span> <span class="n">PYTHAGOREAN</span> <span class="n">TRIPLE</span><span class="p">:</span> <span class="mi">400044</span><span class="p">,</span> <span class="mi">762517</span><span class="p">,</span> <span class="mi">861085</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Well</span> <span class="n">done</span><span class="p">,</span> <span class="n">here</span><span class="p">,</span> <span class="n">have</span> <span class="n">another</span><span class="o">.</span>
<span class="o">===================================================================</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Here</span><span class="s">'s the challange #9:</span><span class="err">
</span><span class="s">[*] Give me the 397207-th primitive pythagorean triple in the following format: a,b,c with a &lt; b &lt; c.</span><span class="err">
</span><span class="s">[*] 397207-TH PRIMITIVE PYTHAGOREAN TRIPLE: 936411, 2313460, 2495789</span><span class="err">
</span><span class="s">[+] Well done, here, have another.</span><span class="err">
</span><span class="s">===================================================================</span><span class="err">
</span><span class="s">[*] Here'</span><span class="n">s</span> <span class="n">the</span> <span class="n">challange</span> <span class="c1">#10:
</span><span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Give</span> <span class="n">me</span> <span class="n">the</span> <span class="mi">1182921</span><span class="o">-</span><span class="n">th</span> <span class="n">primitive</span> <span class="n">pythagorean</span> <span class="n">triple</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">following</span> <span class="nb">format</span><span class="p">:</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span> <span class="k">with</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">.</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="mi">1182921</span><span class="o">-</span><span class="n">TH</span> <span class="n">PRIMITIVE</span> <span class="n">PYTHAGOREAN</span> <span class="n">TRIPLE</span><span class="p">:</span> <span class="mi">535567</span><span class="p">,</span> <span class="mi">7413144</span><span class="p">,</span> <span class="mi">7432465</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Well</span> <span class="n">done</span><span class="p">,</span> <span class="n">here</span><span class="p">,</span> <span class="n">have</span> <span class="n">another</span><span class="o">.</span>
<span class="o">===================================================================</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Good</span> <span class="n">one</span> <span class="n">mate</span><span class="p">,</span> <span class="n">Pythagora</span> <span class="n">would</span> <span class="n">be</span> <span class="n">proud</span><span class="err">!</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Here</span><span class="s">'s your flag: X-MAS{Th3_Tr33_0f_pr1m1t1v3_Pyth4g0r34n_tr1ple5}</span><span class="err">
</span><span class="s">===================================================================</span><span class="err">
</span><span class="s">[*] Closed connection to challs.xmas.htsp.ro port 14004</span><span class="err">
</span></code></pre></div></div>

<hr />

<div style="width:100%;overflow-x:auto"><h2>FLAG : <strong>X-MAS{Th3_Tr33_0f_pr1m1t1v3_Pyth4g0r34n_tr1ple5}</strong></h2></div>
:ET