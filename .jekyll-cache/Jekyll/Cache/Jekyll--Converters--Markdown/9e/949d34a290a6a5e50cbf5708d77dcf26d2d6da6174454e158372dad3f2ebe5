I"Ö.<h1 id="fraud1-whistle-blowing-50-pts"><span style="color:red">Fraud(1) Whistle Blowing (50 pts)</span></h1>

<hr />

<h2 id="part-1--challenge-description">PART 1 : CHALLENGE DESCRIPTION</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>We have finally linked up with the famous Lapland Oracle, that knows and sees all!
Can you guess his secret word?

Remote server: challs.xmas.htsp.ro 13000
Authors: Milkdrop, Gabies
</code></pre></div></div>

<hr />

<h2 id="part-2--getting-the-flag">PART 2 : GETTING THE FLAG</h2>

<p>Connecting to the given server using <strong><code class="highlighter-rouge">netcat</code></strong> gives:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
                                     ,,,,
                                  ,########,
                                 ############
                                |############|
                                 ############
                                  "########"
                                     """"

                     |\___/|
                     | " " |                    ~ ORAKEL ~
              ,===__/( \ / )\__===,        THE LAPLAND  ORACLE
             /     """ (") """     \
            /           "           \
            |   \_____=   =_____/   |
      ,==._/    /\     /^\     /\    \_.==,
     |   _  __/"  \   |] [|   /  "\__  _   |
      555 """      |  |] [|  |      """ 555
"""""""""""""""""""###########""""""""""""""""""""""""""""""""""""""""""""
--- ,#######   ,#############, ,########  ___     _________
 -- #####################################"       _____     _________
    "###" #######################" ____     ___   _____           __
  ---_____  "#############   _           _________     ____
  ______     ##########        ______                _______
         ____"##  "##   _________            ___        ________  _____
    ___       ____    __     _________            _______



Hello child.

&gt; I will give you the True Flag you seek, but for that you must pass my test:
I will think of a word of great length, known only by the gods that roam Lapland.
You must guess which word I am thinking of, but only under a limited number of [1000] tries.
In order to make this possible for you, I will tell you how close you are to my word through a number.
The higher the number, the further you are from my word.
If the number is 0, then you have found it.

Good Luck.
</code></pre></div></div>

<p>The challenge is to find the word the Lapland Oracle thinks of in <strong style="color:orange">a thousand tries or less</strong>. The <strong style="color:orange">guesses given are scored</strong> which tells you how close you really are to the actual word.</p>

<p>I created a simple script to find the ‚Äúword‚Äù is as follows:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>

    <span class="k">print</span> <span class="s">"====================================================================="</span>

    <span class="n">string</span><span class="p">,</span> <span class="n">score</span> <span class="o">=</span> <span class="n">findWordLength</span><span class="p">()</span>
    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"The word is </span><span class="si">%</span><span class="s">d characters long."</span> <span class="o">%</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)))</span>

    <span class="k">print</span> <span class="s">"====================================================================="</span>

    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"FINDING THE WORD"</span><span class="p">)</span>

    <span class="n">string</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>

    <span class="n">chars_lower</span> <span class="o">=</span> <span class="s">"abcdefghijklmnopqrstuvwxyz"</span>
    <span class="n">string</span><span class="p">,</span> <span class="n">score</span> <span class="o">=</span> <span class="n">findChars</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">chars_lower</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>

    <span class="n">chars_upper</span> <span class="o">=</span> <span class="s">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">string</span><span class="p">,</span> <span class="n">score</span> <span class="o">=</span> <span class="n">findChars</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">chars_upper</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>

    <span class="k">print</span> <span class="s">"====================================================================="</span>

    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"CORRECTING SOME CHARACTERS"</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)):</span>

        <span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">"Y"</span> <span class="ow">and</span> <span class="n">score</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> 
            <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">score</span> <span class="o">=</span> <span class="n">fixWordChar</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="s">"Z"</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">"Z"</span> <span class="ow">and</span> <span class="n">score</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> 
            <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">score</span> <span class="o">=</span> <span class="n">fixWordChar</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="s">"a"</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">score</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> 
            <span class="k">print</span> <span class="s">"====================================================================="</span>
            <span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="s">"WORD FOUND: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="s">""</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">string</span><span class="p">)))</span>
            <span class="k">print</span> <span class="s">"====================================================================="</span>
            <span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>
            <span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">())</span>

            <span class="k">print</span> <span class="s">"====================================================================="</span>
            <span class="k">break</span>

    <span class="k">if</span> <span class="n">score</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">guess_ctr</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">:</span> <span class="n">pwnable</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span> <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<p>From my observations, the length of the word and the actual ‚Äúword‚Äù changes every new connection to the remote server. The length ranges consistently from <strong style="color:orange">91-101 characters</strong> and finding out how long the word is reduces the score from around 25000-30000 to 6000-8000 so that is what I did first:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">findWordLength</span><span class="p">():</span>

    <span class="n">string</span> <span class="o">=</span> <span class="s">"a"</span> <span class="o">*</span> <span class="mi">91</span>
    <span class="n">prev_score</span> <span class="o">=</span> <span class="mi">1000000</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">15</span><span class="p">):</span>
    
        <span class="n">score</span> <span class="o">=</span> <span class="n">sendString</span><span class="p">(</span><span class="n">string</span> <span class="o">+</span> <span class="p">(</span><span class="s">"a"</span> <span class="o">*</span> <span class="n">i</span><span class="p">))</span>

        <span class="k">if</span> <span class="n">prev_score</span> <span class="o">&lt;</span> <span class="n">score</span><span class="p">:</span> 
            <span class="n">string</span> <span class="o">+=</span> <span class="p">(</span><span class="s">"a"</span> <span class="o">*</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">string</span><span class="p">,</span> <span class="n">prev_score</span>

        <span class="k">else</span><span class="p">:</span> <span class="n">prev_score</span> <span class="o">=</span> <span class="n">score</span>

</code></pre></div></div>

<p>The string is initialized as a string of ‚Äú<strong><code class="highlighter-rouge">a</code></strong>‚Äùs and returned along with its score.</p>

<p>After figuring out the word length, I began somehow bruteforcing what each character of the word could be. The search begins with lowercase letters begins from lowercase letters starting from <strong style="color:orange">a-z</strong> then uppercase letters from <strong style="color:orange">Z-A</strong>. The reason why uppercase letters are traversed differently is that <strong>‚ÄúZ‚Äù seems to have a closer score to <strong>‚Äúa‚Äù</strong> as compared to <strong>‚ÄúA‚Äù</strong></strong></p>
:ET